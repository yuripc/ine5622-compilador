#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
Package = controle.analisador
ScannerCaseSensitive = true
ScannerTable = Full
Input = String
Parser = LL
#RegularDefinitions
L : [a-zA-Z]
D : [0-9]
WS : [\ \t\n\r]

COM_LINHA : ("#") .*
COM_BLOCO : "/*" ([^"*"]|"*"+ [^"/""*"])* "*"* "*/"
#Tokens
//tokens
id : (@({L}|{D})|{L}) ((@|_)? ({L}|{D}))*
num_int : {D}+
num_real: (({D}+ "." {D}* | "." {D}+) ((e|E) ("+"|"-")? {D}{D}+)? | {D}+ (e|E) ("+"|"-")? {D}{D}+)
literal : '([^']|'')*'

//palavras reservadas
programa = id: "programa"
caracter = id: "caracter"
cadeia = id: "cadeia"
inteiro = id: "inteiro"
booleano = id: "booleano"
se = id: "se"
entao = id: "entao"
senao = id: "senao"
leia = id: "leia"
escreva = id: "escreva"
ou = id: "ou"
e = id: "e"
nao = id: "nao"
falso = id: "falso"
verdadeiro = id: "verdadeiro"
faca = id: "faca"
real = id: "real"
enquanto = id: "enquanto"
metodo = id: "metodo"
ref = id: "ref"
val = id: "val"
retorne = id: "retorne"
div = id: "div"

//espacos em branco e comentarios
: {WS}*
:! {COM_LINHA}
:! {COM_BLOCO}

//pontuacao
";"
","
"."
">"
"<"
"="
"("
")"
"["
"]"
"+"
"-"
"*"
"/"
":"
":="
"<>"
"<="
">="
"{"
"}"
#NonTerminals
<programa>
<bloco>
<dcl_var_const>
<tipo>
<dimensao>
<lid>
<rep_lid>
<fator_const>
<dcl_metodos>
<dcl_metodo>
<par_formais>
<rep_par>
<tipo_metodo>
<mp_par>
<com_composto>
<replistacomando>
<comando>
<senaoparte>
<rcomid>
<rep_lexpr>
<expressao>
<resto_expressao>
<oprel>
<expsimp>
<rep_expsimp>
<op_add>
<termo>
<rep_termo>
<op_mult>
<fator>
<rvar>
<constante>
<constante_explicita>
#Grammar
<programa> ::= programa id #101 ";"  <bloco> "." ;
<bloco> ::= <dcl_var_const> <dcl_metodos> <com_composto> ; 
<dcl_var_const> ::= <tipo> <dimensao> #102 <lid> #103 <fator_const> #104 ";" <dcl_var_const>
 		| ? ; 
<tipo> ::=inteiro #105
 		| real #106
 		| booleano #107
 		| caracter #108
 		| cadeia "[" <constante> #109 "]" ; 
<dimensao> ::= #110 "[" <constante> "]" #179
 		| #111 ? ; 
<lid> ::= id #112 <rep_lid> ; 
<rep_lid> ::= "," <lid>
 		| ? ; 
<fator_const> ::= #113 "=" <constante> #180
 		| #114 ? ; 
<dcl_metodos> ::= <dcl_metodo> ";" <dcl_metodos>
 		| ? ; 
<dcl_metodo> ::= metodo id #115 <par_formais> #116 <tipo_metodo> #117 ";" <bloco> #118 ; 
<par_formais> ::= "(" <mp_par> #119 <lid> #120 ":" <tipo> #121 <rep_par> ")"
 		| ? ; 
<rep_par> ::= ";" <mp_par> #119 <lid> #120 ":" <tipo> #121 <rep_par>
 		| ? ; 
<tipo_metodo> ::= ":" <tipo> #122
 		| ? #123 ; 
<mp_par> ::= ref #124
 		| val #125 ; 
<com_composto> ::= "{" <comando> <replistacomando> "}" ; 
<replistacomando> ::= ";" <comando> <replistacomando>
 		| ? ; 
<comando> ::= id #126 <rcomid>
 		| <com_composto>
 		| se <expressao> #127 entao <comando> <senaoparte>
 		| enquanto <expressao> #127 faca <comando>
 		| leia "(" #128 <lid> ")"
 		| escreva "(" <expressao> #129 <rep_lexpr> ")"
 		| retorne <expressao> #130
 		| ? ; 
<senaoparte> ::= senao <comando>
 		| ? ; 
<rcomid> ::= #131 ":=" <expressao> #132
 		| "[" #133 <expressao> #134 "]" ":=" <expressao> #132
 		| "(" #135 <expressao> #136 <rep_lexpr> ")" #137
 		| ? #138 ; 
<rep_lexpr> ::= "," <expressao> #139 <rep_lexpr>
 		| ? ; 
<expressao> ::= #201 <expsimp> #140 <resto_expressao> #202 ; 
<resto_expressao> ::= <oprel> <expsimp> #141
 		| ? ; 
<oprel> ::= "=" #142
 		| "<" #143
 		| ">" #144
 		| ">=" #145
 		| "<=" #146
 		| "<>" #147 ; 
<expsimp> ::= <termo> #148 <rep_expsimp> ; 
<rep_expsimp> ::= <op_add> #149 <termo> #150 <rep_expsimp>
 		| ? ; 
<op_add> ::= "+" #151
 		| "-" #152
 		| ou #153 ; 
<termo> ::= <fator> #154 <rep_termo> ; 
<rep_termo> ::= <op_mult> #155 <fator> #156 <rep_termo>
 		| ? ; 
<op_mult> ::= "*" #157
 		| "/" #158
 		| e #159
 		| div #160 ; 
<fator> ::= nao #161 <fator> #162
 		| "-" #163 <fator> #164
 		| "(" #165 <expressao> ")" #166
 		| id #126 <rvar> #167
 		| <constante_explicita> #168 ; 
<rvar> ::= "(" #169 <expressao> #136 <rep_lexpr> ")" #170
 		| "[" #133 <expressao> #171 "]"
 		| ? #172 ; 
<constante> ::= id #173
 		| <constante_explicita> ; 
<constante_explicita> ::= num_int #174
 		| num_real #175
 		| falso #176
 		| verdadeiro #177
 		| literal #178 ; 

