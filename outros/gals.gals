#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
Package = controle.analisador
ScannerCaseSensitive = true
ScannerTable = Full
Input = String
Parser = LL
#RegularDefinitions
L : [a-zA-Z]
D : [0-9]
WS : [\ \t\n\r]

COM_LINHA : "/" "/" .*
COM_BLOCO : "/*" ([^"*"]|"*"+ [^"/""*"])* "*"* "*/"
#Tokens
//tokens
id : (@({L}|{D})|{L}) ((@|_)? ({L}|{D}))*
num_int : {D}+
num_real: (({D}+ "." {D}* | "." {D}+) ((e|E) ("+"|"-")? {D}{D}+)? | {D}+ (e|E) ("+"|"-")? {D}{D}+)
literal : '([^']|'')*'

//palavras reservadas
programa = id: "programa"
var = id: "var"
caracter = id: "caracter"
cadeia = id: "cadeia"
procedimento = id: "procedimento"
inicio = id: "inicio"
fim = id: "fim"
inteiro = id: "inteiro"
booleano = id: "booleano"
funcao = id: "funcao"
se = id: "se"
entao = id: "entao"
senao = id: "senao"
leia = id: "leia"
escreva = id: "escreva"
ou = id: "ou"
e = id: "e"
nao = id: "nao"
falso = id: "falso"
verdadeiro = id: "verdadeiro"
de = id: "de"
faca = id: "faca"
real = id: "real"
vetor = id: "vetor"
enquanto = id: "enquanto"
metodo = id: "metodo"
ref = id: "ref"
val = id: "val"
retorne = id: "retorne"
div = id: "div"

//espacos em branco e comentarios
: {WS}*
:! {COM_LINHA}
:! {COM_BLOCO}

//pontuacao
";"
","
"."
">"
"<"
"="
"("
")"
"["
"]"
"+"
"-"
"*"
"/"
":"
":="
"<>"
"<="
">="
"{"
"}"
#NonTerminals
<programa>
<bloco>
<dcl_var_const>
<tipo>
<dimensao>
<lid>
<rep_lid>
<fator_const>
<dcl_metodos>
<dcl_metodo>
<par_formais>
<rep_par>
<tipo_metodo>
<mp_par>
<com_composto>
<replistacomando>
<comando>
<senaoparte>
<rcomid>
<rep_lexpr>
<expressao>
<resto_expressao>
<oprel>
<expsimp>
<rep_expsimp>
<op_add>
<termo>
<rep_termo>
<op_mult>
<fator>
<rvar>
<constante>
<constante_explicita>
#Grammar

<programa> ::= programa id  ";"  <bloco> "." ;

<bloco> ::= <dcl_var_const>  <dcl_metodos>  <com_composto>  ;		 	
 
<dcl_var_const> ::=  <tipo>  <dimensao>  <lid>  <fator_const> ";" <dcl_var_const> 
                              |   ? ;

<tipo> ::=  inteiro | real | booleano | caracter | cadeia "[" <constante> "]";

<dimensao> ::= "["  <constante>  "]"  |   ? ;

<lid> ::= id  <rep_lid>  ;

<rep_lid> ::= ","  <lid> | ? ;

<fator_const> ::=   "="  <constante>  |   ? ;

<dcl_metodos> ::= <dcl_metodo>  ";"  <dcl_metodos>  |  ? ;

<dcl_metodo> ::= metodo id   <par_formais>    <tipo_metodo> ";"   <bloco>  ;                 

<par_formais> ::= "(" <mp_par> <lid> ":" <tipo> <rep_par> ")" | ? ;                      

<rep_par> ::= ";" <mp_par>  <lid>  ":"  <tipo>  <rep_par>  |  ? ;

<tipo_metodo> ::=   ":"  <tipo>  | ? ;

<mp_par>  ::= ref  |  val ;

<com_composto>  ::= "{"   <comando>  <replistacomando>  "}"  ;                             

<replistacomando> ::=   ";"  <comando>  <replistacomando>  |  ? ;

<comando> ::= id  <rcomid>
             |  <com_composto>                                 
             | se <expressao> entao <comando> <senaoparte> 
             | enquanto <expressao> faca <comando>                               
             | leia "(" <lid> ")"                                    
             | escreva "(" <expressao> <rep_lexpr> ")"  
             | retorne <expressao>
	   |  ? ;

<senaoparte> ::= senao  <comando>  |  ? ;

<rcomid> ::= ":=" <expressao> 
                   |   "[" <expressao> "]" ":=" <expressao> 
                   |   "(" <expressao> <rep_lexpr> ")" 
                   |   ? ;

<rep_lexpr>  ::= "," <expressao> <rep_lexpr> |  ? ;

<expressao>  ::= <expsimp> <resto_expressao> ;

<resto_expressao> ::= <oprel> <expsimp> |  ? ;

<oprel> ::= "=" | "<" | ">" | ">=" | "<=" | "<>" ;

<expsimp> ::= <termo> <rep_expsimp> ;

<rep_expsimp> ::= <op_add> <termo> <rep_expsimp>  |  ? ;
                      
<op_add> ::= "+" | "-" | ou ;

<termo> ::= <fator> <rep_termo> ;

<rep_termo> ::= <op_mult> <fator> <rep_termo> |  ? ;

<op_mult> ::= "*" | "/" |  div |  e ;

<fator> ::= nao <fator> 
               | "-"  <fator>
               |  "(" <expressao> ")" 
	     |  id  <rvar>   
	     | <constante_explicita> ;

<rvar> ::= "(" <expressao> <rep_lexpr> ")"  
              |   "[" <expressao>  "]"
              |   ? ;

<constante> ::= id  |  <constante_explicita> ;
  
<constante_explicita>::=   num_int  |  num_real 
                     |  falso  |  verdadeiro  |  literal ;


